// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.21.12
// source: xla/pjrt/compile_options.proto

package compile_options

import (
	device_description "github.com/gomlx/gopjrt/protos/device_description"
	xla "github.com/gomlx/gopjrt/protos/xla"
	xla_data "github.com/gomlx/gopjrt/protos/xla_data"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A serialization of xla::ExecutableBuildOptions.
// Next id: 24.
type ExecutableBuildOptionsProto struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, this is the device to build the computation for. Valid
	// device_ordinal values are: 0 to # of devices - 1. These values are
	// identical to the device ordinal values used by StreamExecutor. The built
	// executable will be executable on any device equivalent to the specified
	// device as determined by Backend::devices_equivalent(). A value of -1
	// indicates this option has not been set.
	DeviceOrdinal int64 `protobuf:"varint,1,opt,name=device_ordinal,json=deviceOrdinal,proto3" json:"device_ordinal,omitempty"`
	// If set, this specifies the layout of the result of the computation. If not
	// set, the service will chose the layout of the result. A Shape is used to
	// store the layout to accommodate tuple result shapes. A value of nullptr
	// indicates the option has not been set.
	ResultLayout *xla_data.ShapeProto `protobuf:"bytes,2,opt,name=result_layout,json=resultLayout,proto3" json:"result_layout,omitempty"`
	// Expose access to the XLA compilation environments, which will be passed to
	// the compilation process.
	CompEnvs *xla.CompilationEnvironmentsProto `protobuf:"bytes,13,opt,name=comp_envs,json=compEnvs,proto3" json:"comp_envs,omitempty"`
	// Expose access to the XLA debug options which will be passed to the
	// compilation process.
	DebugOptions *xla.DebugOptions `protobuf:"bytes,3,opt,name=debug_options,json=debugOptions,proto3" json:"debug_options,omitempty"`
	// The number of replicas of this computation that are to be executed.
	// Defaults to 1.
	NumReplicas int64 `protobuf:"varint,4,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	// The number of partitions in this computation. Defaults to 1.
	NumPartitions int64 `protobuf:"varint,5,opt,name=num_partitions,json=numPartitions,proto3" json:"num_partitions,omitempty"`
	// Indicates whether to use SPMD (true) or MPMD (false) partitioning when
	// num_partitions > 1 and XLA is requested to partition the input program.
	UseSpmdPartitioning bool `protobuf:"varint,6,opt,name=use_spmd_partitioning,json=useSpmdPartitioning,proto3" json:"use_spmd_partitioning,omitempty"`
	// Whether to automatically generate XLA shardings for SPMD partitioner.
	UseAutoSpmdPartitioning bool `protobuf:"varint,7,opt,name=use_auto_spmd_partitioning,json=useAutoSpmdPartitioning,proto3" json:"use_auto_spmd_partitioning,omitempty"`
	// The amount of effort to spend on optimizing for minimizing program
	// execution time, as a value in [-1.0, +1.0]. The baseline is 0.0, which
	// strongly prioritizes execution time at the cost of longer compile times,
	// suitable for production workloads. A value of -0.5 would be appropriate for
	// research use cases that prefer faster compilations to iterate more quickly.
	// Positive values, on the other hand, might enable costly optimizations that
	// are off by default.
	ExecTimeOptimizationEffort float32 `protobuf:"fixed32,20,opt,name=exec_time_optimization_effort,json=execTimeOptimizationEffort,proto3" json:"exec_time_optimization_effort,omitempty"`
	// The amount of effort to spend on making the program fit in memory (where
	// "fit in memory" here has a backend-dependent meaning), as a value in
	// [-1.0,+1.0]. The baseline is 0.0, which expends significant effort on
	// attempting to make the program fit. A value of -1.0 would be appropriate
	// for use cases that wish to spend minimal effort here and fail as quickly as
	// possible instead. Positive values, on the other hand, might enable costly
	// algorithms to reduce memory usage that are off by default.
	MemoryFittingEffort float32 `protobuf:"fixed32,21,opt,name=memory_fitting_effort,json=memoryFittingEffort,proto3" json:"memory_fitting_effort,omitempty"`
	// Whether HLOs should be deduplicated.
	DeduplicateHlo bool `protobuf:"varint,8,opt,name=deduplicate_hlo,json=deduplicateHlo,proto3" json:"deduplicate_hlo,omitempty"`
	// If set, this specifies a static device assignment for the computation.
	// Otherwise, the computation will be compiled generically and can be run with
	// any device assignment compatible with the computation's replica and
	// partition counts.
	DeviceAssignment *xla_data.DeviceAssignmentProto `protobuf:"bytes,9,opt,name=device_assignment,json=deviceAssignment,proto3" json:"device_assignment,omitempty"`
	// Whether input and output buffers are aliased if the associated parameter is
	// passed-through XLA modules without being changed.
	AliasPassthroughParams bool `protobuf:"varint,10,opt,name=alias_passthrough_params,json=aliasPassthroughParams,proto3" json:"alias_passthrough_params,omitempty"`
	// By default, XLA builds an executable by invoking standard compilation, i.e.
	// running Compiler::Compile, or both Compiler::RunHloPasses and
	// Compiler::RunBackend. When run_backend_only is set to true, XLA builds an
	// executable by invoking only RunBackend and skip invoking RunHloPasses,
	// which can be used to compile post-optimizations HLO modules.
	RunBackendOnly bool `protobuf:"varint,11,opt,name=run_backend_only,json=runBackendOnly,proto3" json:"run_backend_only,omitempty"`
	// Allows sharding propagation to propagate to the parameters. This changes
	// the input shape of the computation (which is undesirable), but it can be
	// used to allow to run partial compilation to determine what would be the
	// input sharding of a computation if XLA would be allowed to propagate the
	// sharding which can be used by higher level framework as a way to query
	// intermediate sharding of operations when multiple computation would be
	// chained and merged together.
	// This is a vector of bool, because the user can control which parameters can
	// have the sharding substituted. If only one boolean value is passed in the
	// vector that is interpreted as the value to be applied for every parameter.
	AllowSpmdShardingPropagationToParameters []bool `protobuf:"varint,18,rep,packed,name=allow_spmd_sharding_propagation_to_parameters,json=allowSpmdShardingPropagationToParameters,proto3" json:"allow_spmd_sharding_propagation_to_parameters,omitempty"`
	// Allows sharding propagation to propagate to the outputs. This changes the
	// output shape of the computation (which is undesirable), but it can be used
	// to allow to run partial compilation to determine what would be the output
	// sharding of a computation if XLA would be allowed to propagate the sharding
	// which can be used by higher level framework as a way to query intermediate
	// sharding of operations when multiple computation would be chained and
	// merged together.
	// This is a vector of bool, because the user can control (if the output of
	// the computation is a tuple) which elements of the tuple can have the
	// sharding substituted and which don't. If only one boolean value is passed
	// in the vector that's interpreted as the value to be applied for every
	// single element of the output tuple. One value per element of the tuple
	// means that each value is attached to one of the output elements.
	AllowSpmdShardingPropagationToOutput []bool `protobuf:"varint,12,rep,packed,name=allow_spmd_sharding_propagation_to_output,json=allowSpmdShardingPropagationToOutput,proto3" json:"allow_spmd_sharding_propagation_to_output,omitempty"`
	// Opaque profile data for any feedback directed optimizations.
	FdoProfile       []byte `protobuf:"bytes,14,opt,name=fdo_profile,json=fdoProfile,proto3" json:"fdo_profile,omitempty"`
	DeviceMemorySize int64  `protobuf:"varint,15,opt,name=device_memory_size,json=deviceMemorySize,proto3" json:"device_memory_size,omitempty"`
	// Mesh shape in auto sharding options.
	AutoSpmdPartitioningMeshShape []int64 `protobuf:"varint,16,rep,packed,name=auto_spmd_partitioning_mesh_shape,json=autoSpmdPartitioningMeshShape,proto3" json:"auto_spmd_partitioning_mesh_shape,omitempty"`
	// Mesh ids in auto sharding options.
	AutoSpmdPartitioningMeshIds []int64 `protobuf:"varint,17,rep,packed,name=auto_spmd_partitioning_mesh_ids,json=autoSpmdPartitioningMeshIds,proto3" json:"auto_spmd_partitioning_mesh_ids,omitempty"`
	// Use Shardy, a new partitioner, to replace the existing
	// ShardingPropagation and SpmdPartitioner. See go/xla-sdy-pipeline for
	// details.
	UseShardyPartitioner bool  `protobuf:"varint,19,opt,name=use_shardy_partitioner,json=useShardyPartitioner,proto3" json:"use_shardy_partitioner,omitempty"`
	ProcessIndex         int64 `protobuf:"varint,22,opt,name=process_index,json=processIndex,proto3" json:"process_index,omitempty"`
	ProcessCount         int64 `protobuf:"varint,23,opt,name=process_count,json=processCount,proto3" json:"process_count,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExecutableBuildOptionsProto) Reset() {
	*x = ExecutableBuildOptionsProto{}
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableBuildOptionsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableBuildOptionsProto) ProtoMessage() {}

func (x *ExecutableBuildOptionsProto) ProtoReflect() protoreflect.Message {
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutableBuildOptionsProto.ProtoReflect.Descriptor instead.
func (*ExecutableBuildOptionsProto) Descriptor() ([]byte, []int) {
	return file_xla_pjrt_compile_options_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutableBuildOptionsProto) GetDeviceOrdinal() int64 {
	if x != nil {
		return x.DeviceOrdinal
	}
	return 0
}

func (x *ExecutableBuildOptionsProto) GetResultLayout() *xla_data.ShapeProto {
	if x != nil {
		return x.ResultLayout
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetCompEnvs() *xla.CompilationEnvironmentsProto {
	if x != nil {
		return x.CompEnvs
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetDebugOptions() *xla.DebugOptions {
	if x != nil {
		return x.DebugOptions
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetNumReplicas() int64 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *ExecutableBuildOptionsProto) GetNumPartitions() int64 {
	if x != nil {
		return x.NumPartitions
	}
	return 0
}

func (x *ExecutableBuildOptionsProto) GetUseSpmdPartitioning() bool {
	if x != nil {
		return x.UseSpmdPartitioning
	}
	return false
}

func (x *ExecutableBuildOptionsProto) GetUseAutoSpmdPartitioning() bool {
	if x != nil {
		return x.UseAutoSpmdPartitioning
	}
	return false
}

func (x *ExecutableBuildOptionsProto) GetExecTimeOptimizationEffort() float32 {
	if x != nil {
		return x.ExecTimeOptimizationEffort
	}
	return 0
}

func (x *ExecutableBuildOptionsProto) GetMemoryFittingEffort() float32 {
	if x != nil {
		return x.MemoryFittingEffort
	}
	return 0
}

func (x *ExecutableBuildOptionsProto) GetDeduplicateHlo() bool {
	if x != nil {
		return x.DeduplicateHlo
	}
	return false
}

func (x *ExecutableBuildOptionsProto) GetDeviceAssignment() *xla_data.DeviceAssignmentProto {
	if x != nil {
		return x.DeviceAssignment
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetAliasPassthroughParams() bool {
	if x != nil {
		return x.AliasPassthroughParams
	}
	return false
}

func (x *ExecutableBuildOptionsProto) GetRunBackendOnly() bool {
	if x != nil {
		return x.RunBackendOnly
	}
	return false
}

func (x *ExecutableBuildOptionsProto) GetAllowSpmdShardingPropagationToParameters() []bool {
	if x != nil {
		return x.AllowSpmdShardingPropagationToParameters
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetAllowSpmdShardingPropagationToOutput() []bool {
	if x != nil {
		return x.AllowSpmdShardingPropagationToOutput
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetFdoProfile() []byte {
	if x != nil {
		return x.FdoProfile
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetDeviceMemorySize() int64 {
	if x != nil {
		return x.DeviceMemorySize
	}
	return 0
}

func (x *ExecutableBuildOptionsProto) GetAutoSpmdPartitioningMeshShape() []int64 {
	if x != nil {
		return x.AutoSpmdPartitioningMeshShape
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetAutoSpmdPartitioningMeshIds() []int64 {
	if x != nil {
		return x.AutoSpmdPartitioningMeshIds
	}
	return nil
}

func (x *ExecutableBuildOptionsProto) GetUseShardyPartitioner() bool {
	if x != nil {
		return x.UseShardyPartitioner
	}
	return false
}

func (x *ExecutableBuildOptionsProto) GetProcessIndex() int64 {
	if x != nil {
		return x.ProcessIndex
	}
	return 0
}

func (x *ExecutableBuildOptionsProto) GetProcessCount() int64 {
	if x != nil {
		return x.ProcessCount
	}
	return 0
}

type OptionOverrideProto struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*OptionOverrideProto_StringField
	//	*OptionOverrideProto_BoolField
	//	*OptionOverrideProto_IntField
	//	*OptionOverrideProto_DoubleField
	Value         isOptionOverrideProto_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionOverrideProto) Reset() {
	*x = OptionOverrideProto{}
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionOverrideProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionOverrideProto) ProtoMessage() {}

func (x *OptionOverrideProto) ProtoReflect() protoreflect.Message {
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionOverrideProto.ProtoReflect.Descriptor instead.
func (*OptionOverrideProto) Descriptor() ([]byte, []int) {
	return file_xla_pjrt_compile_options_proto_rawDescGZIP(), []int{1}
}

func (x *OptionOverrideProto) GetValue() isOptionOverrideProto_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *OptionOverrideProto) GetStringField() string {
	if x != nil {
		if x, ok := x.Value.(*OptionOverrideProto_StringField); ok {
			return x.StringField
		}
	}
	return ""
}

func (x *OptionOverrideProto) GetBoolField() bool {
	if x != nil {
		if x, ok := x.Value.(*OptionOverrideProto_BoolField); ok {
			return x.BoolField
		}
	}
	return false
}

func (x *OptionOverrideProto) GetIntField() int64 {
	if x != nil {
		if x, ok := x.Value.(*OptionOverrideProto_IntField); ok {
			return x.IntField
		}
	}
	return 0
}

func (x *OptionOverrideProto) GetDoubleField() float64 {
	if x != nil {
		if x, ok := x.Value.(*OptionOverrideProto_DoubleField); ok {
			return x.DoubleField
		}
	}
	return 0
}

type isOptionOverrideProto_Value interface {
	isOptionOverrideProto_Value()
}

type OptionOverrideProto_StringField struct {
	StringField string `protobuf:"bytes,1,opt,name=string_field,json=stringField,proto3,oneof"`
}

type OptionOverrideProto_BoolField struct {
	BoolField bool `protobuf:"varint,2,opt,name=bool_field,json=boolField,proto3,oneof"`
}

type OptionOverrideProto_IntField struct {
	IntField int64 `protobuf:"varint,3,opt,name=int_field,json=intField,proto3,oneof"`
}

type OptionOverrideProto_DoubleField struct {
	DoubleField float64 `protobuf:"fixed64,4,opt,name=double_field,json=doubleField,proto3,oneof"`
}

func (*OptionOverrideProto_StringField) isOptionOverrideProto_Value() {}

func (*OptionOverrideProto_BoolField) isOptionOverrideProto_Value() {}

func (*OptionOverrideProto_IntField) isOptionOverrideProto_Value() {}

func (*OptionOverrideProto_DoubleField) isOptionOverrideProto_Value() {}

type CompileOptionsProto struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Refer CompileOptions for documentation of fields.
	ArgumentLayouts            []*xla_data.ShapeProto                   `protobuf:"bytes,1,rep,name=argument_layouts,json=argumentLayouts,proto3" json:"argument_layouts,omitempty"`
	ParameterIsTupledArguments bool                                     `protobuf:"varint,2,opt,name=parameter_is_tupled_arguments,json=parameterIsTupledArguments,proto3" json:"parameter_is_tupled_arguments,omitempty"`
	ExecutableBuildOptions     *ExecutableBuildOptionsProto             `protobuf:"bytes,3,opt,name=executable_build_options,json=executableBuildOptions,proto3" json:"executable_build_options,omitempty"`
	CompilePortableExecutable  bool                                     `protobuf:"varint,4,opt,name=compile_portable_executable,json=compilePortableExecutable,proto3" json:"compile_portable_executable,omitempty"`
	ProfileVersion             int64                                    `protobuf:"varint,5,opt,name=profile_version,json=profileVersion,proto3" json:"profile_version,omitempty"`
	SerializedMultiSliceConfig []byte                                   `protobuf:"bytes,6,opt,name=serialized_multi_slice_config,json=serializedMultiSliceConfig,proto3" json:"serialized_multi_slice_config,omitempty"`
	EnvOptionOverrides         map[string]*OptionOverrideProto          `protobuf:"bytes,7,rep,name=env_option_overrides,json=envOptionOverrides,proto3" json:"env_option_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TargetConfig               *device_description.GpuTargetConfigProto `protobuf:"bytes,8,opt,name=target_config,json=targetConfig,proto3" json:"target_config,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CompileOptionsProto) Reset() {
	*x = CompileOptionsProto{}
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompileOptionsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileOptionsProto) ProtoMessage() {}

func (x *CompileOptionsProto) ProtoReflect() protoreflect.Message {
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileOptionsProto.ProtoReflect.Descriptor instead.
func (*CompileOptionsProto) Descriptor() ([]byte, []int) {
	return file_xla_pjrt_compile_options_proto_rawDescGZIP(), []int{2}
}

func (x *CompileOptionsProto) GetArgumentLayouts() []*xla_data.ShapeProto {
	if x != nil {
		return x.ArgumentLayouts
	}
	return nil
}

func (x *CompileOptionsProto) GetParameterIsTupledArguments() bool {
	if x != nil {
		return x.ParameterIsTupledArguments
	}
	return false
}

func (x *CompileOptionsProto) GetExecutableBuildOptions() *ExecutableBuildOptionsProto {
	if x != nil {
		return x.ExecutableBuildOptions
	}
	return nil
}

func (x *CompileOptionsProto) GetCompilePortableExecutable() bool {
	if x != nil {
		return x.CompilePortableExecutable
	}
	return false
}

func (x *CompileOptionsProto) GetProfileVersion() int64 {
	if x != nil {
		return x.ProfileVersion
	}
	return 0
}

func (x *CompileOptionsProto) GetSerializedMultiSliceConfig() []byte {
	if x != nil {
		return x.SerializedMultiSliceConfig
	}
	return nil
}

func (x *CompileOptionsProto) GetEnvOptionOverrides() map[string]*OptionOverrideProto {
	if x != nil {
		return x.EnvOptionOverrides
	}
	return nil
}

func (x *CompileOptionsProto) GetTargetConfig() *device_description.GpuTargetConfigProto {
	if x != nil {
		return x.TargetConfig
	}
	return nil
}

// Helper for serializing opaque executables alongside CompileOptions.
type ExecutableAndOptionsProto struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SerializedExecutable []byte                 `protobuf:"bytes,1,opt,name=serialized_executable,json=serializedExecutable,proto3" json:"serialized_executable,omitempty"`
	CompileOptions       *CompileOptionsProto   `protobuf:"bytes,2,opt,name=compile_options,json=compileOptions,proto3" json:"compile_options,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExecutableAndOptionsProto) Reset() {
	*x = ExecutableAndOptionsProto{}
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutableAndOptionsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableAndOptionsProto) ProtoMessage() {}

func (x *ExecutableAndOptionsProto) ProtoReflect() protoreflect.Message {
	mi := &file_xla_pjrt_compile_options_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutableAndOptionsProto.ProtoReflect.Descriptor instead.
func (*ExecutableAndOptionsProto) Descriptor() ([]byte, []int) {
	return file_xla_pjrt_compile_options_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutableAndOptionsProto) GetSerializedExecutable() []byte {
	if x != nil {
		return x.SerializedExecutable
	}
	return nil
}

func (x *ExecutableAndOptionsProto) GetCompileOptions() *CompileOptionsProto {
	if x != nil {
		return x.CompileOptions
	}
	return nil
}

var File_xla_pjrt_compile_options_proto protoreflect.FileDescriptor

var file_xla_pjrt_compile_options_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x78, 0x6c, 0x61, 0x2f, 0x70, 0x6a, 0x72, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x78, 0x6c, 0x61, 0x1a, 0x2c, 0x78, 0x6c, 0x61, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x78, 0x6c, 0x61, 0x2f, 0x78, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x78, 0x6c, 0x61, 0x2f, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x0a, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x34, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x65, 0x6e, 0x76, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x45,
	0x6e, 0x76, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x6d,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75,
	0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x65,
	0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x66, 0x66, 0x6f,
	0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6c, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x48, 0x6c, 0x6f, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x75, 0x6e,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x6d,
	0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x08, 0x52, 0x28, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x70, 0x6d, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70,
	0x6d, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x08, 0x52, 0x24, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x70,
	0x6d, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x64, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x64, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x21,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x68, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73,
	0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x1b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a,
	0x13, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x05, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x3a, 0x0a, 0x10, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x73, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5a,
	0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x47, 0x70, 0x75, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x5f, 0x0a, 0x17, 0x45, 0x6e, 0x76, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_xla_pjrt_compile_options_proto_rawDescOnce sync.Once
	file_xla_pjrt_compile_options_proto_rawDescData []byte
)

func file_xla_pjrt_compile_options_proto_rawDescGZIP() []byte {
	file_xla_pjrt_compile_options_proto_rawDescOnce.Do(func() {
		file_xla_pjrt_compile_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_xla_pjrt_compile_options_proto_rawDesc), len(file_xla_pjrt_compile_options_proto_rawDesc)))
	})
	return file_xla_pjrt_compile_options_proto_rawDescData
}

var file_xla_pjrt_compile_options_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_xla_pjrt_compile_options_proto_goTypes = []any{
	(*ExecutableBuildOptionsProto)(nil),             // 0: xla.ExecutableBuildOptionsProto
	(*OptionOverrideProto)(nil),                     // 1: xla.OptionOverrideProto
	(*CompileOptionsProto)(nil),                     // 2: xla.CompileOptionsProto
	(*ExecutableAndOptionsProto)(nil),               // 3: xla.ExecutableAndOptionsProto
	nil,                                             // 4: xla.CompileOptionsProto.EnvOptionOverridesEntry
	(*xla_data.ShapeProto)(nil),                     // 5: xla.ShapeProto
	(*xla.CompilationEnvironmentsProto)(nil),        // 6: xla.CompilationEnvironmentsProto
	(*xla.DebugOptions)(nil),                        // 7: xla.DebugOptions
	(*xla_data.DeviceAssignmentProto)(nil),          // 8: xla.DeviceAssignmentProto
	(*device_description.GpuTargetConfigProto)(nil), // 9: stream_executor.GpuTargetConfigProto
}
var file_xla_pjrt_compile_options_proto_depIdxs = []int32{
	5,  // 0: xla.ExecutableBuildOptionsProto.result_layout:type_name -> xla.ShapeProto
	6,  // 1: xla.ExecutableBuildOptionsProto.comp_envs:type_name -> xla.CompilationEnvironmentsProto
	7,  // 2: xla.ExecutableBuildOptionsProto.debug_options:type_name -> xla.DebugOptions
	8,  // 3: xla.ExecutableBuildOptionsProto.device_assignment:type_name -> xla.DeviceAssignmentProto
	5,  // 4: xla.CompileOptionsProto.argument_layouts:type_name -> xla.ShapeProto
	0,  // 5: xla.CompileOptionsProto.executable_build_options:type_name -> xla.ExecutableBuildOptionsProto
	4,  // 6: xla.CompileOptionsProto.env_option_overrides:type_name -> xla.CompileOptionsProto.EnvOptionOverridesEntry
	9,  // 7: xla.CompileOptionsProto.target_config:type_name -> stream_executor.GpuTargetConfigProto
	2,  // 8: xla.ExecutableAndOptionsProto.compile_options:type_name -> xla.CompileOptionsProto
	1,  // 9: xla.CompileOptionsProto.EnvOptionOverridesEntry.value:type_name -> xla.OptionOverrideProto
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_xla_pjrt_compile_options_proto_init() }
func file_xla_pjrt_compile_options_proto_init() {
	if File_xla_pjrt_compile_options_proto != nil {
		return
	}
	file_xla_pjrt_compile_options_proto_msgTypes[1].OneofWrappers = []any{
		(*OptionOverrideProto_StringField)(nil),
		(*OptionOverrideProto_BoolField)(nil),
		(*OptionOverrideProto_IntField)(nil),
		(*OptionOverrideProto_DoubleField)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_xla_pjrt_compile_options_proto_rawDesc), len(file_xla_pjrt_compile_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xla_pjrt_compile_options_proto_goTypes,
		DependencyIndexes: file_xla_pjrt_compile_options_proto_depIdxs,
		MessageInfos:      file_xla_pjrt_compile_options_proto_msgTypes,
	}.Build()
	File_xla_pjrt_compile_options_proto = out.File
	file_xla_pjrt_compile_options_proto_goTypes = nil
	file_xla_pjrt_compile_options_proto_depIdxs = nil
}
