// Code generated by "enumer -type=OpType -transform=snake optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "invalidparameterfunc_returnconstantidentityreduce_windowrng_bit_generatorbatch_norm_for_inferencebatch_norm_for_trainingbatch_norm_gradientbit_countabsaddarg_min_maxbitcastbitwise_andbitwise_notbitwise_orbitwise_xorbroadcastbroadcast_in_dimceilclzcomplexconcatenateconjconv_general_dilatedconvert_d_typecosdivdotdot_generaldynamic_slicedynamic_update_sliceequalequal_total_ordererfexpexpm1fftfloorgathergreater_or_equalgreater_or_equal_total_ordergreater_thangreater_than_total_orderimagiotais_finiteless_or_equalless_or_equal_total_orderless_thanless_than_total_orderloglog1plogical_andlogical_notlogical_orlogical_xorlogisticmaxminmulnegnot_equalnot_equal_total_orderpadpowrealreduce_bitwise_andreduce_bitwise_orreduce_bitwise_xorreduce_logical_andreduce_logical_orreduce_logical_xorreduce_maxreduce_minreduce_productreduce_sumremreshapereverseroundrsqrtscatter_maxscatter_minscatter_sumselect_and_scatter_maxselect_and_scatter_minselect_and_scatter_sumshift_leftshift_right_arithmeticshift_right_logicalsignsinslicesqrtsubtanhtransposewherelast"

var _OpTypeIndex = [...]uint16{0, 7, 16, 27, 35, 43, 56, 73, 97, 120, 139, 148, 151, 154, 165, 172, 183, 194, 204, 215, 224, 240, 244, 247, 254, 265, 269, 289, 303, 306, 309, 312, 323, 336, 356, 361, 378, 381, 384, 389, 392, 397, 403, 419, 447, 459, 483, 487, 491, 500, 513, 538, 547, 568, 571, 576, 587, 598, 608, 619, 627, 630, 633, 636, 639, 648, 669, 672, 675, 679, 697, 714, 732, 750, 767, 785, 795, 805, 819, 829, 832, 839, 846, 851, 856, 867, 878, 889, 911, 933, 955, 965, 987, 1006, 1010, 1013, 1018, 1022, 1025, 1029, 1038, 1043, 1047}

const _OpTypeLowerName = "invalidparameterfunc_returnconstantidentityreduce_windowrng_bit_generatorbatch_norm_for_inferencebatch_norm_for_trainingbatch_norm_gradientbit_countabsaddarg_min_maxbitcastbitwise_andbitwise_notbitwise_orbitwise_xorbroadcastbroadcast_in_dimceilclzcomplexconcatenateconjconv_general_dilatedconvert_d_typecosdivdotdot_generaldynamic_slicedynamic_update_sliceequalequal_total_ordererfexpexpm1fftfloorgathergreater_or_equalgreater_or_equal_total_ordergreater_thangreater_than_total_orderimagiotais_finiteless_or_equalless_or_equal_total_orderless_thanless_than_total_orderloglog1plogical_andlogical_notlogical_orlogical_xorlogisticmaxminmulnegnot_equalnot_equal_total_orderpadpowrealreduce_bitwise_andreduce_bitwise_orreduce_bitwise_xorreduce_logical_andreduce_logical_orreduce_logical_xorreduce_maxreduce_minreduce_productreduce_sumremreshapereverseroundrsqrtscatter_maxscatter_minscatter_sumselect_and_scatter_maxselect_and_scatter_minselect_and_scatter_sumshift_leftshift_right_arithmeticshift_right_logicalsignsinslicesqrtsubtanhtransposewherelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Parameter-(1)]
	_ = x[FuncReturn-(2)]
	_ = x[Constant-(3)]
	_ = x[Identity-(4)]
	_ = x[ReduceWindow-(5)]
	_ = x[RngBitGenerator-(6)]
	_ = x[BatchNormForInference-(7)]
	_ = x[BatchNormForTraining-(8)]
	_ = x[BatchNormGradient-(9)]
	_ = x[BitCount-(10)]
	_ = x[Abs-(11)]
	_ = x[Add-(12)]
	_ = x[ArgMinMax-(13)]
	_ = x[Bitcast-(14)]
	_ = x[BitwiseAnd-(15)]
	_ = x[BitwiseNot-(16)]
	_ = x[BitwiseOr-(17)]
	_ = x[BitwiseXor-(18)]
	_ = x[Broadcast-(19)]
	_ = x[BroadcastInDim-(20)]
	_ = x[Ceil-(21)]
	_ = x[Clz-(22)]
	_ = x[Complex-(23)]
	_ = x[Concatenate-(24)]
	_ = x[Conj-(25)]
	_ = x[ConvGeneralDilated-(26)]
	_ = x[ConvertDType-(27)]
	_ = x[Cos-(28)]
	_ = x[Div-(29)]
	_ = x[Dot-(30)]
	_ = x[DotGeneral-(31)]
	_ = x[DynamicSlice-(32)]
	_ = x[DynamicUpdateSlice-(33)]
	_ = x[Equal-(34)]
	_ = x[EqualTotalOrder-(35)]
	_ = x[Erf-(36)]
	_ = x[Exp-(37)]
	_ = x[Expm1-(38)]
	_ = x[FFT-(39)]
	_ = x[Floor-(40)]
	_ = x[Gather-(41)]
	_ = x[GreaterOrEqual-(42)]
	_ = x[GreaterOrEqualTotalOrder-(43)]
	_ = x[GreaterThan-(44)]
	_ = x[GreaterThanTotalOrder-(45)]
	_ = x[Imag-(46)]
	_ = x[Iota-(47)]
	_ = x[IsFinite-(48)]
	_ = x[LessOrEqual-(49)]
	_ = x[LessOrEqualTotalOrder-(50)]
	_ = x[LessThan-(51)]
	_ = x[LessThanTotalOrder-(52)]
	_ = x[Log-(53)]
	_ = x[Log1p-(54)]
	_ = x[LogicalAnd-(55)]
	_ = x[LogicalNot-(56)]
	_ = x[LogicalOr-(57)]
	_ = x[LogicalXor-(58)]
	_ = x[Logistic-(59)]
	_ = x[Max-(60)]
	_ = x[Min-(61)]
	_ = x[Mul-(62)]
	_ = x[Neg-(63)]
	_ = x[NotEqual-(64)]
	_ = x[NotEqualTotalOrder-(65)]
	_ = x[Pad-(66)]
	_ = x[Pow-(67)]
	_ = x[Real-(68)]
	_ = x[ReduceBitwiseAnd-(69)]
	_ = x[ReduceBitwiseOr-(70)]
	_ = x[ReduceBitwiseXor-(71)]
	_ = x[ReduceLogicalAnd-(72)]
	_ = x[ReduceLogicalOr-(73)]
	_ = x[ReduceLogicalXor-(74)]
	_ = x[ReduceMax-(75)]
	_ = x[ReduceMin-(76)]
	_ = x[ReduceProduct-(77)]
	_ = x[ReduceSum-(78)]
	_ = x[Rem-(79)]
	_ = x[Reshape-(80)]
	_ = x[Reverse-(81)]
	_ = x[Round-(82)]
	_ = x[Rsqrt-(83)]
	_ = x[ScatterMax-(84)]
	_ = x[ScatterMin-(85)]
	_ = x[ScatterSum-(86)]
	_ = x[SelectAndScatterMax-(87)]
	_ = x[SelectAndScatterMin-(88)]
	_ = x[SelectAndScatterSum-(89)]
	_ = x[ShiftLeft-(90)]
	_ = x[ShiftRightArithmetic-(91)]
	_ = x[ShiftRightLogical-(92)]
	_ = x[Sign-(93)]
	_ = x[Sin-(94)]
	_ = x[Slice-(95)]
	_ = x[Sqrt-(96)]
	_ = x[Sub-(97)]
	_ = x[Tanh-(98)]
	_ = x[Transpose-(99)]
	_ = x[Where-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, Parameter, FuncReturn, Constant, Identity, ReduceWindow, RngBitGenerator, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitCount, Abs, Add, ArgMinMax, Bitcast, BitwiseAnd, BitwiseNot, BitwiseOr, BitwiseXor, Broadcast, BroadcastInDim, Ceil, Clz, Complex, Concatenate, Conj, ConvGeneralDilated, ConvertDType, Cos, Div, Dot, DotGeneral, DynamicSlice, DynamicUpdateSlice, Equal, EqualTotalOrder, Erf, Exp, Expm1, FFT, Floor, Gather, GreaterOrEqual, GreaterOrEqualTotalOrder, GreaterThan, GreaterThanTotalOrder, Imag, Iota, IsFinite, LessOrEqual, LessOrEqualTotalOrder, LessThan, LessThanTotalOrder, Log, Log1p, LogicalAnd, LogicalNot, LogicalOr, LogicalXor, Logistic, Max, Min, Mul, Neg, NotEqual, NotEqualTotalOrder, Pad, Pow, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, Rem, Reshape, Reverse, Round, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sin, Slice, Sqrt, Sub, Tanh, Transpose, Where, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:            Invalid,
	_OpTypeLowerName[0:7]:       Invalid,
	_OpTypeName[7:16]:           Parameter,
	_OpTypeLowerName[7:16]:      Parameter,
	_OpTypeName[16:27]:          FuncReturn,
	_OpTypeLowerName[16:27]:     FuncReturn,
	_OpTypeName[27:35]:          Constant,
	_OpTypeLowerName[27:35]:     Constant,
	_OpTypeName[35:43]:          Identity,
	_OpTypeLowerName[35:43]:     Identity,
	_OpTypeName[43:56]:          ReduceWindow,
	_OpTypeLowerName[43:56]:     ReduceWindow,
	_OpTypeName[56:73]:          RngBitGenerator,
	_OpTypeLowerName[56:73]:     RngBitGenerator,
	_OpTypeName[73:97]:          BatchNormForInference,
	_OpTypeLowerName[73:97]:     BatchNormForInference,
	_OpTypeName[97:120]:         BatchNormForTraining,
	_OpTypeLowerName[97:120]:    BatchNormForTraining,
	_OpTypeName[120:139]:        BatchNormGradient,
	_OpTypeLowerName[120:139]:   BatchNormGradient,
	_OpTypeName[139:148]:        BitCount,
	_OpTypeLowerName[139:148]:   BitCount,
	_OpTypeName[148:151]:        Abs,
	_OpTypeLowerName[148:151]:   Abs,
	_OpTypeName[151:154]:        Add,
	_OpTypeLowerName[151:154]:   Add,
	_OpTypeName[154:165]:        ArgMinMax,
	_OpTypeLowerName[154:165]:   ArgMinMax,
	_OpTypeName[165:172]:        Bitcast,
	_OpTypeLowerName[165:172]:   Bitcast,
	_OpTypeName[172:183]:        BitwiseAnd,
	_OpTypeLowerName[172:183]:   BitwiseAnd,
	_OpTypeName[183:194]:        BitwiseNot,
	_OpTypeLowerName[183:194]:   BitwiseNot,
	_OpTypeName[194:204]:        BitwiseOr,
	_OpTypeLowerName[194:204]:   BitwiseOr,
	_OpTypeName[204:215]:        BitwiseXor,
	_OpTypeLowerName[204:215]:   BitwiseXor,
	_OpTypeName[215:224]:        Broadcast,
	_OpTypeLowerName[215:224]:   Broadcast,
	_OpTypeName[224:240]:        BroadcastInDim,
	_OpTypeLowerName[224:240]:   BroadcastInDim,
	_OpTypeName[240:244]:        Ceil,
	_OpTypeLowerName[240:244]:   Ceil,
	_OpTypeName[244:247]:        Clz,
	_OpTypeLowerName[244:247]:   Clz,
	_OpTypeName[247:254]:        Complex,
	_OpTypeLowerName[247:254]:   Complex,
	_OpTypeName[254:265]:        Concatenate,
	_OpTypeLowerName[254:265]:   Concatenate,
	_OpTypeName[265:269]:        Conj,
	_OpTypeLowerName[265:269]:   Conj,
	_OpTypeName[269:289]:        ConvGeneralDilated,
	_OpTypeLowerName[269:289]:   ConvGeneralDilated,
	_OpTypeName[289:303]:        ConvertDType,
	_OpTypeLowerName[289:303]:   ConvertDType,
	_OpTypeName[303:306]:        Cos,
	_OpTypeLowerName[303:306]:   Cos,
	_OpTypeName[306:309]:        Div,
	_OpTypeLowerName[306:309]:   Div,
	_OpTypeName[309:312]:        Dot,
	_OpTypeLowerName[309:312]:   Dot,
	_OpTypeName[312:323]:        DotGeneral,
	_OpTypeLowerName[312:323]:   DotGeneral,
	_OpTypeName[323:336]:        DynamicSlice,
	_OpTypeLowerName[323:336]:   DynamicSlice,
	_OpTypeName[336:356]:        DynamicUpdateSlice,
	_OpTypeLowerName[336:356]:   DynamicUpdateSlice,
	_OpTypeName[356:361]:        Equal,
	_OpTypeLowerName[356:361]:   Equal,
	_OpTypeName[361:378]:        EqualTotalOrder,
	_OpTypeLowerName[361:378]:   EqualTotalOrder,
	_OpTypeName[378:381]:        Erf,
	_OpTypeLowerName[378:381]:   Erf,
	_OpTypeName[381:384]:        Exp,
	_OpTypeLowerName[381:384]:   Exp,
	_OpTypeName[384:389]:        Expm1,
	_OpTypeLowerName[384:389]:   Expm1,
	_OpTypeName[389:392]:        FFT,
	_OpTypeLowerName[389:392]:   FFT,
	_OpTypeName[392:397]:        Floor,
	_OpTypeLowerName[392:397]:   Floor,
	_OpTypeName[397:403]:        Gather,
	_OpTypeLowerName[397:403]:   Gather,
	_OpTypeName[403:419]:        GreaterOrEqual,
	_OpTypeLowerName[403:419]:   GreaterOrEqual,
	_OpTypeName[419:447]:        GreaterOrEqualTotalOrder,
	_OpTypeLowerName[419:447]:   GreaterOrEqualTotalOrder,
	_OpTypeName[447:459]:        GreaterThan,
	_OpTypeLowerName[447:459]:   GreaterThan,
	_OpTypeName[459:483]:        GreaterThanTotalOrder,
	_OpTypeLowerName[459:483]:   GreaterThanTotalOrder,
	_OpTypeName[483:487]:        Imag,
	_OpTypeLowerName[483:487]:   Imag,
	_OpTypeName[487:491]:        Iota,
	_OpTypeLowerName[487:491]:   Iota,
	_OpTypeName[491:500]:        IsFinite,
	_OpTypeLowerName[491:500]:   IsFinite,
	_OpTypeName[500:513]:        LessOrEqual,
	_OpTypeLowerName[500:513]:   LessOrEqual,
	_OpTypeName[513:538]:        LessOrEqualTotalOrder,
	_OpTypeLowerName[513:538]:   LessOrEqualTotalOrder,
	_OpTypeName[538:547]:        LessThan,
	_OpTypeLowerName[538:547]:   LessThan,
	_OpTypeName[547:568]:        LessThanTotalOrder,
	_OpTypeLowerName[547:568]:   LessThanTotalOrder,
	_OpTypeName[568:571]:        Log,
	_OpTypeLowerName[568:571]:   Log,
	_OpTypeName[571:576]:        Log1p,
	_OpTypeLowerName[571:576]:   Log1p,
	_OpTypeName[576:587]:        LogicalAnd,
	_OpTypeLowerName[576:587]:   LogicalAnd,
	_OpTypeName[587:598]:        LogicalNot,
	_OpTypeLowerName[587:598]:   LogicalNot,
	_OpTypeName[598:608]:        LogicalOr,
	_OpTypeLowerName[598:608]:   LogicalOr,
	_OpTypeName[608:619]:        LogicalXor,
	_OpTypeLowerName[608:619]:   LogicalXor,
	_OpTypeName[619:627]:        Logistic,
	_OpTypeLowerName[619:627]:   Logistic,
	_OpTypeName[627:630]:        Max,
	_OpTypeLowerName[627:630]:   Max,
	_OpTypeName[630:633]:        Min,
	_OpTypeLowerName[630:633]:   Min,
	_OpTypeName[633:636]:        Mul,
	_OpTypeLowerName[633:636]:   Mul,
	_OpTypeName[636:639]:        Neg,
	_OpTypeLowerName[636:639]:   Neg,
	_OpTypeName[639:648]:        NotEqual,
	_OpTypeLowerName[639:648]:   NotEqual,
	_OpTypeName[648:669]:        NotEqualTotalOrder,
	_OpTypeLowerName[648:669]:   NotEqualTotalOrder,
	_OpTypeName[669:672]:        Pad,
	_OpTypeLowerName[669:672]:   Pad,
	_OpTypeName[672:675]:        Pow,
	_OpTypeLowerName[672:675]:   Pow,
	_OpTypeName[675:679]:        Real,
	_OpTypeLowerName[675:679]:   Real,
	_OpTypeName[679:697]:        ReduceBitwiseAnd,
	_OpTypeLowerName[679:697]:   ReduceBitwiseAnd,
	_OpTypeName[697:714]:        ReduceBitwiseOr,
	_OpTypeLowerName[697:714]:   ReduceBitwiseOr,
	_OpTypeName[714:732]:        ReduceBitwiseXor,
	_OpTypeLowerName[714:732]:   ReduceBitwiseXor,
	_OpTypeName[732:750]:        ReduceLogicalAnd,
	_OpTypeLowerName[732:750]:   ReduceLogicalAnd,
	_OpTypeName[750:767]:        ReduceLogicalOr,
	_OpTypeLowerName[750:767]:   ReduceLogicalOr,
	_OpTypeName[767:785]:        ReduceLogicalXor,
	_OpTypeLowerName[767:785]:   ReduceLogicalXor,
	_OpTypeName[785:795]:        ReduceMax,
	_OpTypeLowerName[785:795]:   ReduceMax,
	_OpTypeName[795:805]:        ReduceMin,
	_OpTypeLowerName[795:805]:   ReduceMin,
	_OpTypeName[805:819]:        ReduceProduct,
	_OpTypeLowerName[805:819]:   ReduceProduct,
	_OpTypeName[819:829]:        ReduceSum,
	_OpTypeLowerName[819:829]:   ReduceSum,
	_OpTypeName[829:832]:        Rem,
	_OpTypeLowerName[829:832]:   Rem,
	_OpTypeName[832:839]:        Reshape,
	_OpTypeLowerName[832:839]:   Reshape,
	_OpTypeName[839:846]:        Reverse,
	_OpTypeLowerName[839:846]:   Reverse,
	_OpTypeName[846:851]:        Round,
	_OpTypeLowerName[846:851]:   Round,
	_OpTypeName[851:856]:        Rsqrt,
	_OpTypeLowerName[851:856]:   Rsqrt,
	_OpTypeName[856:867]:        ScatterMax,
	_OpTypeLowerName[856:867]:   ScatterMax,
	_OpTypeName[867:878]:        ScatterMin,
	_OpTypeLowerName[867:878]:   ScatterMin,
	_OpTypeName[878:889]:        ScatterSum,
	_OpTypeLowerName[878:889]:   ScatterSum,
	_OpTypeName[889:911]:        SelectAndScatterMax,
	_OpTypeLowerName[889:911]:   SelectAndScatterMax,
	_OpTypeName[911:933]:        SelectAndScatterMin,
	_OpTypeLowerName[911:933]:   SelectAndScatterMin,
	_OpTypeName[933:955]:        SelectAndScatterSum,
	_OpTypeLowerName[933:955]:   SelectAndScatterSum,
	_OpTypeName[955:965]:        ShiftLeft,
	_OpTypeLowerName[955:965]:   ShiftLeft,
	_OpTypeName[965:987]:        ShiftRightArithmetic,
	_OpTypeLowerName[965:987]:   ShiftRightArithmetic,
	_OpTypeName[987:1006]:       ShiftRightLogical,
	_OpTypeLowerName[987:1006]:  ShiftRightLogical,
	_OpTypeName[1006:1010]:      Sign,
	_OpTypeLowerName[1006:1010]: Sign,
	_OpTypeName[1010:1013]:      Sin,
	_OpTypeLowerName[1010:1013]: Sin,
	_OpTypeName[1013:1018]:      Slice,
	_OpTypeLowerName[1013:1018]: Slice,
	_OpTypeName[1018:1022]:      Sqrt,
	_OpTypeLowerName[1018:1022]: Sqrt,
	_OpTypeName[1022:1025]:      Sub,
	_OpTypeLowerName[1022:1025]: Sub,
	_OpTypeName[1025:1029]:      Tanh,
	_OpTypeLowerName[1025:1029]: Tanh,
	_OpTypeName[1029:1038]:      Transpose,
	_OpTypeLowerName[1029:1038]: Transpose,
	_OpTypeName[1038:1043]:      Where,
	_OpTypeLowerName[1038:1043]: Where,
	_OpTypeName[1043:1047]:      Last,
	_OpTypeLowerName[1043:1047]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:16],
	_OpTypeName[16:27],
	_OpTypeName[27:35],
	_OpTypeName[35:43],
	_OpTypeName[43:56],
	_OpTypeName[56:73],
	_OpTypeName[73:97],
	_OpTypeName[97:120],
	_OpTypeName[120:139],
	_OpTypeName[139:148],
	_OpTypeName[148:151],
	_OpTypeName[151:154],
	_OpTypeName[154:165],
	_OpTypeName[165:172],
	_OpTypeName[172:183],
	_OpTypeName[183:194],
	_OpTypeName[194:204],
	_OpTypeName[204:215],
	_OpTypeName[215:224],
	_OpTypeName[224:240],
	_OpTypeName[240:244],
	_OpTypeName[244:247],
	_OpTypeName[247:254],
	_OpTypeName[254:265],
	_OpTypeName[265:269],
	_OpTypeName[269:289],
	_OpTypeName[289:303],
	_OpTypeName[303:306],
	_OpTypeName[306:309],
	_OpTypeName[309:312],
	_OpTypeName[312:323],
	_OpTypeName[323:336],
	_OpTypeName[336:356],
	_OpTypeName[356:361],
	_OpTypeName[361:378],
	_OpTypeName[378:381],
	_OpTypeName[381:384],
	_OpTypeName[384:389],
	_OpTypeName[389:392],
	_OpTypeName[392:397],
	_OpTypeName[397:403],
	_OpTypeName[403:419],
	_OpTypeName[419:447],
	_OpTypeName[447:459],
	_OpTypeName[459:483],
	_OpTypeName[483:487],
	_OpTypeName[487:491],
	_OpTypeName[491:500],
	_OpTypeName[500:513],
	_OpTypeName[513:538],
	_OpTypeName[538:547],
	_OpTypeName[547:568],
	_OpTypeName[568:571],
	_OpTypeName[571:576],
	_OpTypeName[576:587],
	_OpTypeName[587:598],
	_OpTypeName[598:608],
	_OpTypeName[608:619],
	_OpTypeName[619:627],
	_OpTypeName[627:630],
	_OpTypeName[630:633],
	_OpTypeName[633:636],
	_OpTypeName[636:639],
	_OpTypeName[639:648],
	_OpTypeName[648:669],
	_OpTypeName[669:672],
	_OpTypeName[672:675],
	_OpTypeName[675:679],
	_OpTypeName[679:697],
	_OpTypeName[697:714],
	_OpTypeName[714:732],
	_OpTypeName[732:750],
	_OpTypeName[750:767],
	_OpTypeName[767:785],
	_OpTypeName[785:795],
	_OpTypeName[795:805],
	_OpTypeName[805:819],
	_OpTypeName[819:829],
	_OpTypeName[829:832],
	_OpTypeName[832:839],
	_OpTypeName[839:846],
	_OpTypeName[846:851],
	_OpTypeName[851:856],
	_OpTypeName[856:867],
	_OpTypeName[867:878],
	_OpTypeName[878:889],
	_OpTypeName[889:911],
	_OpTypeName[911:933],
	_OpTypeName[933:955],
	_OpTypeName[955:965],
	_OpTypeName[965:987],
	_OpTypeName[987:1006],
	_OpTypeName[1006:1010],
	_OpTypeName[1010:1013],
	_OpTypeName[1013:1018],
	_OpTypeName[1018:1022],
	_OpTypeName[1022:1025],
	_OpTypeName[1025:1029],
	_OpTypeName[1029:1038],
	_OpTypeName[1038:1043],
	_OpTypeName[1043:1047],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
