// Code generated by "enumer -type OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidParameterConstantIdentityReduceWindowRngBitGeneratorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountAbsAddArgMinMaxBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClzComplexConcatenateConjConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhereLast"

var _OpTypeIndex = [...]uint16{0, 7, 16, 24, 32, 44, 59, 80, 100, 117, 125, 128, 131, 140, 147, 157, 167, 176, 186, 195, 209, 213, 216, 223, 234, 238, 256, 268, 271, 274, 277, 287, 299, 317, 322, 337, 340, 343, 348, 351, 356, 362, 376, 400, 411, 432, 436, 440, 448, 459, 480, 488, 506, 509, 514, 524, 534, 543, 553, 561, 564, 567, 570, 573, 581, 599, 602, 605, 609, 625, 640, 656, 672, 687, 703, 712, 721, 734, 743, 746, 753, 760, 765, 770, 780, 790, 800, 819, 838, 857, 866, 886, 903, 907, 910, 915, 919, 922, 926, 935, 940, 944}

const _OpTypeLowerName = "invalidparameterconstantidentityreducewindowrngbitgeneratorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountabsaddargminmaxbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclzcomplexconcatenateconjconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumremreshapereverseroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewherelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Parameter-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[ReduceWindow-(4)]
	_ = x[RngBitGenerator-(5)]
	_ = x[BatchNormForInference-(6)]
	_ = x[BatchNormForTraining-(7)]
	_ = x[BatchNormGradient-(8)]
	_ = x[BitCount-(9)]
	_ = x[Abs-(10)]
	_ = x[Add-(11)]
	_ = x[ArgMinMax-(12)]
	_ = x[Bitcast-(13)]
	_ = x[BitwiseAnd-(14)]
	_ = x[BitwiseNot-(15)]
	_ = x[BitwiseOr-(16)]
	_ = x[BitwiseXor-(17)]
	_ = x[Broadcast-(18)]
	_ = x[BroadcastInDim-(19)]
	_ = x[Ceil-(20)]
	_ = x[Clz-(21)]
	_ = x[Complex-(22)]
	_ = x[Concatenate-(23)]
	_ = x[Conj-(24)]
	_ = x[ConvGeneralDilated-(25)]
	_ = x[ConvertDType-(26)]
	_ = x[Cos-(27)]
	_ = x[Div-(28)]
	_ = x[Dot-(29)]
	_ = x[DotGeneral-(30)]
	_ = x[DynamicSlice-(31)]
	_ = x[DynamicUpdateSlice-(32)]
	_ = x[Equal-(33)]
	_ = x[EqualTotalOrder-(34)]
	_ = x[Erf-(35)]
	_ = x[Exp-(36)]
	_ = x[Expm1-(37)]
	_ = x[FFT-(38)]
	_ = x[Floor-(39)]
	_ = x[Gather-(40)]
	_ = x[GreaterOrEqual-(41)]
	_ = x[GreaterOrEqualTotalOrder-(42)]
	_ = x[GreaterThan-(43)]
	_ = x[GreaterThanTotalOrder-(44)]
	_ = x[Imag-(45)]
	_ = x[Iota-(46)]
	_ = x[IsFinite-(47)]
	_ = x[LessOrEqual-(48)]
	_ = x[LessOrEqualTotalOrder-(49)]
	_ = x[LessThan-(50)]
	_ = x[LessThanTotalOrder-(51)]
	_ = x[Log-(52)]
	_ = x[Log1p-(53)]
	_ = x[LogicalAnd-(54)]
	_ = x[LogicalNot-(55)]
	_ = x[LogicalOr-(56)]
	_ = x[LogicalXor-(57)]
	_ = x[Logistic-(58)]
	_ = x[Max-(59)]
	_ = x[Min-(60)]
	_ = x[Mul-(61)]
	_ = x[Neg-(62)]
	_ = x[NotEqual-(63)]
	_ = x[NotEqualTotalOrder-(64)]
	_ = x[Pad-(65)]
	_ = x[Pow-(66)]
	_ = x[Real-(67)]
	_ = x[ReduceBitwiseAnd-(68)]
	_ = x[ReduceBitwiseOr-(69)]
	_ = x[ReduceBitwiseXor-(70)]
	_ = x[ReduceLogicalAnd-(71)]
	_ = x[ReduceLogicalOr-(72)]
	_ = x[ReduceLogicalXor-(73)]
	_ = x[ReduceMax-(74)]
	_ = x[ReduceMin-(75)]
	_ = x[ReduceProduct-(76)]
	_ = x[ReduceSum-(77)]
	_ = x[Rem-(78)]
	_ = x[Reshape-(79)]
	_ = x[Reverse-(80)]
	_ = x[Round-(81)]
	_ = x[Rsqrt-(82)]
	_ = x[ScatterMax-(83)]
	_ = x[ScatterMin-(84)]
	_ = x[ScatterSum-(85)]
	_ = x[SelectAndScatterMax-(86)]
	_ = x[SelectAndScatterMin-(87)]
	_ = x[SelectAndScatterSum-(88)]
	_ = x[ShiftLeft-(89)]
	_ = x[ShiftRightArithmetic-(90)]
	_ = x[ShiftRightLogical-(91)]
	_ = x[Sign-(92)]
	_ = x[Sin-(93)]
	_ = x[Slice-(94)]
	_ = x[Sqrt-(95)]
	_ = x[Sub-(96)]
	_ = x[Tanh-(97)]
	_ = x[Transpose-(98)]
	_ = x[Where-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, Parameter, Constant, Identity, ReduceWindow, RngBitGenerator, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitCount, Abs, Add, ArgMinMax, Bitcast, BitwiseAnd, BitwiseNot, BitwiseOr, BitwiseXor, Broadcast, BroadcastInDim, Ceil, Clz, Complex, Concatenate, Conj, ConvGeneralDilated, ConvertDType, Cos, Div, Dot, DotGeneral, DynamicSlice, DynamicUpdateSlice, Equal, EqualTotalOrder, Erf, Exp, Expm1, FFT, Floor, Gather, GreaterOrEqual, GreaterOrEqualTotalOrder, GreaterThan, GreaterThanTotalOrder, Imag, Iota, IsFinite, LessOrEqual, LessOrEqualTotalOrder, LessThan, LessThanTotalOrder, Log, Log1p, LogicalAnd, LogicalNot, LogicalOr, LogicalXor, Logistic, Max, Min, Mul, Neg, NotEqual, NotEqualTotalOrder, Pad, Pow, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, Rem, Reshape, Reverse, Round, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sin, Slice, Sqrt, Sub, Tanh, Transpose, Where, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:16]:         Parameter,
	_OpTypeLowerName[7:16]:    Parameter,
	_OpTypeName[16:24]:        Constant,
	_OpTypeLowerName[16:24]:   Constant,
	_OpTypeName[24:32]:        Identity,
	_OpTypeLowerName[24:32]:   Identity,
	_OpTypeName[32:44]:        ReduceWindow,
	_OpTypeLowerName[32:44]:   ReduceWindow,
	_OpTypeName[44:59]:        RngBitGenerator,
	_OpTypeLowerName[44:59]:   RngBitGenerator,
	_OpTypeName[59:80]:        BatchNormForInference,
	_OpTypeLowerName[59:80]:   BatchNormForInference,
	_OpTypeName[80:100]:       BatchNormForTraining,
	_OpTypeLowerName[80:100]:  BatchNormForTraining,
	_OpTypeName[100:117]:      BatchNormGradient,
	_OpTypeLowerName[100:117]: BatchNormGradient,
	_OpTypeName[117:125]:      BitCount,
	_OpTypeLowerName[117:125]: BitCount,
	_OpTypeName[125:128]:      Abs,
	_OpTypeLowerName[125:128]: Abs,
	_OpTypeName[128:131]:      Add,
	_OpTypeLowerName[128:131]: Add,
	_OpTypeName[131:140]:      ArgMinMax,
	_OpTypeLowerName[131:140]: ArgMinMax,
	_OpTypeName[140:147]:      Bitcast,
	_OpTypeLowerName[140:147]: Bitcast,
	_OpTypeName[147:157]:      BitwiseAnd,
	_OpTypeLowerName[147:157]: BitwiseAnd,
	_OpTypeName[157:167]:      BitwiseNot,
	_OpTypeLowerName[157:167]: BitwiseNot,
	_OpTypeName[167:176]:      BitwiseOr,
	_OpTypeLowerName[167:176]: BitwiseOr,
	_OpTypeName[176:186]:      BitwiseXor,
	_OpTypeLowerName[176:186]: BitwiseXor,
	_OpTypeName[186:195]:      Broadcast,
	_OpTypeLowerName[186:195]: Broadcast,
	_OpTypeName[195:209]:      BroadcastInDim,
	_OpTypeLowerName[195:209]: BroadcastInDim,
	_OpTypeName[209:213]:      Ceil,
	_OpTypeLowerName[209:213]: Ceil,
	_OpTypeName[213:216]:      Clz,
	_OpTypeLowerName[213:216]: Clz,
	_OpTypeName[216:223]:      Complex,
	_OpTypeLowerName[216:223]: Complex,
	_OpTypeName[223:234]:      Concatenate,
	_OpTypeLowerName[223:234]: Concatenate,
	_OpTypeName[234:238]:      Conj,
	_OpTypeLowerName[234:238]: Conj,
	_OpTypeName[238:256]:      ConvGeneralDilated,
	_OpTypeLowerName[238:256]: ConvGeneralDilated,
	_OpTypeName[256:268]:      ConvertDType,
	_OpTypeLowerName[256:268]: ConvertDType,
	_OpTypeName[268:271]:      Cos,
	_OpTypeLowerName[268:271]: Cos,
	_OpTypeName[271:274]:      Div,
	_OpTypeLowerName[271:274]: Div,
	_OpTypeName[274:277]:      Dot,
	_OpTypeLowerName[274:277]: Dot,
	_OpTypeName[277:287]:      DotGeneral,
	_OpTypeLowerName[277:287]: DotGeneral,
	_OpTypeName[287:299]:      DynamicSlice,
	_OpTypeLowerName[287:299]: DynamicSlice,
	_OpTypeName[299:317]:      DynamicUpdateSlice,
	_OpTypeLowerName[299:317]: DynamicUpdateSlice,
	_OpTypeName[317:322]:      Equal,
	_OpTypeLowerName[317:322]: Equal,
	_OpTypeName[322:337]:      EqualTotalOrder,
	_OpTypeLowerName[322:337]: EqualTotalOrder,
	_OpTypeName[337:340]:      Erf,
	_OpTypeLowerName[337:340]: Erf,
	_OpTypeName[340:343]:      Exp,
	_OpTypeLowerName[340:343]: Exp,
	_OpTypeName[343:348]:      Expm1,
	_OpTypeLowerName[343:348]: Expm1,
	_OpTypeName[348:351]:      FFT,
	_OpTypeLowerName[348:351]: FFT,
	_OpTypeName[351:356]:      Floor,
	_OpTypeLowerName[351:356]: Floor,
	_OpTypeName[356:362]:      Gather,
	_OpTypeLowerName[356:362]: Gather,
	_OpTypeName[362:376]:      GreaterOrEqual,
	_OpTypeLowerName[362:376]: GreaterOrEqual,
	_OpTypeName[376:400]:      GreaterOrEqualTotalOrder,
	_OpTypeLowerName[376:400]: GreaterOrEqualTotalOrder,
	_OpTypeName[400:411]:      GreaterThan,
	_OpTypeLowerName[400:411]: GreaterThan,
	_OpTypeName[411:432]:      GreaterThanTotalOrder,
	_OpTypeLowerName[411:432]: GreaterThanTotalOrder,
	_OpTypeName[432:436]:      Imag,
	_OpTypeLowerName[432:436]: Imag,
	_OpTypeName[436:440]:      Iota,
	_OpTypeLowerName[436:440]: Iota,
	_OpTypeName[440:448]:      IsFinite,
	_OpTypeLowerName[440:448]: IsFinite,
	_OpTypeName[448:459]:      LessOrEqual,
	_OpTypeLowerName[448:459]: LessOrEqual,
	_OpTypeName[459:480]:      LessOrEqualTotalOrder,
	_OpTypeLowerName[459:480]: LessOrEqualTotalOrder,
	_OpTypeName[480:488]:      LessThan,
	_OpTypeLowerName[480:488]: LessThan,
	_OpTypeName[488:506]:      LessThanTotalOrder,
	_OpTypeLowerName[488:506]: LessThanTotalOrder,
	_OpTypeName[506:509]:      Log,
	_OpTypeLowerName[506:509]: Log,
	_OpTypeName[509:514]:      Log1p,
	_OpTypeLowerName[509:514]: Log1p,
	_OpTypeName[514:524]:      LogicalAnd,
	_OpTypeLowerName[514:524]: LogicalAnd,
	_OpTypeName[524:534]:      LogicalNot,
	_OpTypeLowerName[524:534]: LogicalNot,
	_OpTypeName[534:543]:      LogicalOr,
	_OpTypeLowerName[534:543]: LogicalOr,
	_OpTypeName[543:553]:      LogicalXor,
	_OpTypeLowerName[543:553]: LogicalXor,
	_OpTypeName[553:561]:      Logistic,
	_OpTypeLowerName[553:561]: Logistic,
	_OpTypeName[561:564]:      Max,
	_OpTypeLowerName[561:564]: Max,
	_OpTypeName[564:567]:      Min,
	_OpTypeLowerName[564:567]: Min,
	_OpTypeName[567:570]:      Mul,
	_OpTypeLowerName[567:570]: Mul,
	_OpTypeName[570:573]:      Neg,
	_OpTypeLowerName[570:573]: Neg,
	_OpTypeName[573:581]:      NotEqual,
	_OpTypeLowerName[573:581]: NotEqual,
	_OpTypeName[581:599]:      NotEqualTotalOrder,
	_OpTypeLowerName[581:599]: NotEqualTotalOrder,
	_OpTypeName[599:602]:      Pad,
	_OpTypeLowerName[599:602]: Pad,
	_OpTypeName[602:605]:      Pow,
	_OpTypeLowerName[602:605]: Pow,
	_OpTypeName[605:609]:      Real,
	_OpTypeLowerName[605:609]: Real,
	_OpTypeName[609:625]:      ReduceBitwiseAnd,
	_OpTypeLowerName[609:625]: ReduceBitwiseAnd,
	_OpTypeName[625:640]:      ReduceBitwiseOr,
	_OpTypeLowerName[625:640]: ReduceBitwiseOr,
	_OpTypeName[640:656]:      ReduceBitwiseXor,
	_OpTypeLowerName[640:656]: ReduceBitwiseXor,
	_OpTypeName[656:672]:      ReduceLogicalAnd,
	_OpTypeLowerName[656:672]: ReduceLogicalAnd,
	_OpTypeName[672:687]:      ReduceLogicalOr,
	_OpTypeLowerName[672:687]: ReduceLogicalOr,
	_OpTypeName[687:703]:      ReduceLogicalXor,
	_OpTypeLowerName[687:703]: ReduceLogicalXor,
	_OpTypeName[703:712]:      ReduceMax,
	_OpTypeLowerName[703:712]: ReduceMax,
	_OpTypeName[712:721]:      ReduceMin,
	_OpTypeLowerName[712:721]: ReduceMin,
	_OpTypeName[721:734]:      ReduceProduct,
	_OpTypeLowerName[721:734]: ReduceProduct,
	_OpTypeName[734:743]:      ReduceSum,
	_OpTypeLowerName[734:743]: ReduceSum,
	_OpTypeName[743:746]:      Rem,
	_OpTypeLowerName[743:746]: Rem,
	_OpTypeName[746:753]:      Reshape,
	_OpTypeLowerName[746:753]: Reshape,
	_OpTypeName[753:760]:      Reverse,
	_OpTypeLowerName[753:760]: Reverse,
	_OpTypeName[760:765]:      Round,
	_OpTypeLowerName[760:765]: Round,
	_OpTypeName[765:770]:      Rsqrt,
	_OpTypeLowerName[765:770]: Rsqrt,
	_OpTypeName[770:780]:      ScatterMax,
	_OpTypeLowerName[770:780]: ScatterMax,
	_OpTypeName[780:790]:      ScatterMin,
	_OpTypeLowerName[780:790]: ScatterMin,
	_OpTypeName[790:800]:      ScatterSum,
	_OpTypeLowerName[790:800]: ScatterSum,
	_OpTypeName[800:819]:      SelectAndScatterMax,
	_OpTypeLowerName[800:819]: SelectAndScatterMax,
	_OpTypeName[819:838]:      SelectAndScatterMin,
	_OpTypeLowerName[819:838]: SelectAndScatterMin,
	_OpTypeName[838:857]:      SelectAndScatterSum,
	_OpTypeLowerName[838:857]: SelectAndScatterSum,
	_OpTypeName[857:866]:      ShiftLeft,
	_OpTypeLowerName[857:866]: ShiftLeft,
	_OpTypeName[866:886]:      ShiftRightArithmetic,
	_OpTypeLowerName[866:886]: ShiftRightArithmetic,
	_OpTypeName[886:903]:      ShiftRightLogical,
	_OpTypeLowerName[886:903]: ShiftRightLogical,
	_OpTypeName[903:907]:      Sign,
	_OpTypeLowerName[903:907]: Sign,
	_OpTypeName[907:910]:      Sin,
	_OpTypeLowerName[907:910]: Sin,
	_OpTypeName[910:915]:      Slice,
	_OpTypeLowerName[910:915]: Slice,
	_OpTypeName[915:919]:      Sqrt,
	_OpTypeLowerName[915:919]: Sqrt,
	_OpTypeName[919:922]:      Sub,
	_OpTypeLowerName[919:922]: Sub,
	_OpTypeName[922:926]:      Tanh,
	_OpTypeLowerName[922:926]: Tanh,
	_OpTypeName[926:935]:      Transpose,
	_OpTypeLowerName[926:935]: Transpose,
	_OpTypeName[935:940]:      Where,
	_OpTypeLowerName[935:940]: Where,
	_OpTypeName[940:944]:      Last,
	_OpTypeLowerName[940:944]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:16],
	_OpTypeName[16:24],
	_OpTypeName[24:32],
	_OpTypeName[32:44],
	_OpTypeName[44:59],
	_OpTypeName[59:80],
	_OpTypeName[80:100],
	_OpTypeName[100:117],
	_OpTypeName[117:125],
	_OpTypeName[125:128],
	_OpTypeName[128:131],
	_OpTypeName[131:140],
	_OpTypeName[140:147],
	_OpTypeName[147:157],
	_OpTypeName[157:167],
	_OpTypeName[167:176],
	_OpTypeName[176:186],
	_OpTypeName[186:195],
	_OpTypeName[195:209],
	_OpTypeName[209:213],
	_OpTypeName[213:216],
	_OpTypeName[216:223],
	_OpTypeName[223:234],
	_OpTypeName[234:238],
	_OpTypeName[238:256],
	_OpTypeName[256:268],
	_OpTypeName[268:271],
	_OpTypeName[271:274],
	_OpTypeName[274:277],
	_OpTypeName[277:287],
	_OpTypeName[287:299],
	_OpTypeName[299:317],
	_OpTypeName[317:322],
	_OpTypeName[322:337],
	_OpTypeName[337:340],
	_OpTypeName[340:343],
	_OpTypeName[343:348],
	_OpTypeName[348:351],
	_OpTypeName[351:356],
	_OpTypeName[356:362],
	_OpTypeName[362:376],
	_OpTypeName[376:400],
	_OpTypeName[400:411],
	_OpTypeName[411:432],
	_OpTypeName[432:436],
	_OpTypeName[436:440],
	_OpTypeName[440:448],
	_OpTypeName[448:459],
	_OpTypeName[459:480],
	_OpTypeName[480:488],
	_OpTypeName[488:506],
	_OpTypeName[506:509],
	_OpTypeName[509:514],
	_OpTypeName[514:524],
	_OpTypeName[524:534],
	_OpTypeName[534:543],
	_OpTypeName[543:553],
	_OpTypeName[553:561],
	_OpTypeName[561:564],
	_OpTypeName[564:567],
	_OpTypeName[567:570],
	_OpTypeName[570:573],
	_OpTypeName[573:581],
	_OpTypeName[581:599],
	_OpTypeName[599:602],
	_OpTypeName[602:605],
	_OpTypeName[605:609],
	_OpTypeName[609:625],
	_OpTypeName[625:640],
	_OpTypeName[640:656],
	_OpTypeName[656:672],
	_OpTypeName[672:687],
	_OpTypeName[687:703],
	_OpTypeName[703:712],
	_OpTypeName[712:721],
	_OpTypeName[721:734],
	_OpTypeName[734:743],
	_OpTypeName[743:746],
	_OpTypeName[746:753],
	_OpTypeName[753:760],
	_OpTypeName[760:765],
	_OpTypeName[765:770],
	_OpTypeName[770:780],
	_OpTypeName[780:790],
	_OpTypeName[790:800],
	_OpTypeName[800:819],
	_OpTypeName[819:838],
	_OpTypeName[838:857],
	_OpTypeName[857:866],
	_OpTypeName[866:886],
	_OpTypeName[886:903],
	_OpTypeName[903:907],
	_OpTypeName[907:910],
	_OpTypeName[910:915],
	_OpTypeName[915:919],
	_OpTypeName[919:922],
	_OpTypeName[922:926],
	_OpTypeName[926:935],
	_OpTypeName[935:940],
	_OpTypeName[940:944],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
