// Code generated by "enumer -type=ReduceOpType reduce.go"; DO NOT EDIT.

package xlabuilder

import (
	"fmt"
	"strings"
)

const _ReduceOpTypeName = "UndefinedReduceTypeReduceSumTypeReduceProductTypeReduceMaxTypeReduceMinTypeReduceLogicalAndTypeReduceLogicalOrTypeReduceLogicalXorTypeReduceBitwiseAndTypeReduceBitwiseOrTypeReduceBitwiseXorType"

var _ReduceOpTypeIndex = [...]uint8{0, 19, 32, 49, 62, 75, 95, 114, 134, 154, 173, 193}

const _ReduceOpTypeLowerName = "undefinedreducetypereducesumtypereduceproducttypereducemaxtypereducemintypereducelogicalandtypereducelogicalortypereducelogicalxortypereducebitwiseandtypereducebitwiseortypereducebitwisexortype"

func (i ReduceOpType) String() string {
	if i < 0 || i >= ReduceOpType(len(_ReduceOpTypeIndex)-1) {
		return fmt.Sprintf("ReduceOpType(%d)", i)
	}
	return _ReduceOpTypeName[_ReduceOpTypeIndex[i]:_ReduceOpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ReduceOpTypeNoOp() {
	var x [1]struct{}
	_ = x[UndefinedReduceType-(0)]
	_ = x[ReduceSumType-(1)]
	_ = x[ReduceProductType-(2)]
	_ = x[ReduceMaxType-(3)]
	_ = x[ReduceMinType-(4)]
	_ = x[ReduceLogicalAndType-(5)]
	_ = x[ReduceLogicalOrType-(6)]
	_ = x[ReduceLogicalXorType-(7)]
	_ = x[ReduceBitwiseAndType-(8)]
	_ = x[ReduceBitwiseOrType-(9)]
	_ = x[ReduceBitwiseXorType-(10)]
}

var _ReduceOpTypeValues = []ReduceOpType{UndefinedReduceType, ReduceSumType, ReduceProductType, ReduceMaxType, ReduceMinType, ReduceLogicalAndType, ReduceLogicalOrType, ReduceLogicalXorType, ReduceBitwiseAndType, ReduceBitwiseOrType, ReduceBitwiseXorType}

var _ReduceOpTypeNameToValueMap = map[string]ReduceOpType{
	_ReduceOpTypeName[0:19]:         UndefinedReduceType,
	_ReduceOpTypeLowerName[0:19]:    UndefinedReduceType,
	_ReduceOpTypeName[19:32]:        ReduceSumType,
	_ReduceOpTypeLowerName[19:32]:   ReduceSumType,
	_ReduceOpTypeName[32:49]:        ReduceProductType,
	_ReduceOpTypeLowerName[32:49]:   ReduceProductType,
	_ReduceOpTypeName[49:62]:        ReduceMaxType,
	_ReduceOpTypeLowerName[49:62]:   ReduceMaxType,
	_ReduceOpTypeName[62:75]:        ReduceMinType,
	_ReduceOpTypeLowerName[62:75]:   ReduceMinType,
	_ReduceOpTypeName[75:95]:        ReduceLogicalAndType,
	_ReduceOpTypeLowerName[75:95]:   ReduceLogicalAndType,
	_ReduceOpTypeName[95:114]:       ReduceLogicalOrType,
	_ReduceOpTypeLowerName[95:114]:  ReduceLogicalOrType,
	_ReduceOpTypeName[114:134]:      ReduceLogicalXorType,
	_ReduceOpTypeLowerName[114:134]: ReduceLogicalXorType,
	_ReduceOpTypeName[134:154]:      ReduceBitwiseAndType,
	_ReduceOpTypeLowerName[134:154]: ReduceBitwiseAndType,
	_ReduceOpTypeName[154:173]:      ReduceBitwiseOrType,
	_ReduceOpTypeLowerName[154:173]: ReduceBitwiseOrType,
	_ReduceOpTypeName[173:193]:      ReduceBitwiseXorType,
	_ReduceOpTypeLowerName[173:193]: ReduceBitwiseXorType,
}

var _ReduceOpTypeNames = []string{
	_ReduceOpTypeName[0:19],
	_ReduceOpTypeName[19:32],
	_ReduceOpTypeName[32:49],
	_ReduceOpTypeName[49:62],
	_ReduceOpTypeName[62:75],
	_ReduceOpTypeName[75:95],
	_ReduceOpTypeName[95:114],
	_ReduceOpTypeName[114:134],
	_ReduceOpTypeName[134:154],
	_ReduceOpTypeName[154:173],
	_ReduceOpTypeName[173:193],
}

// ReduceOpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReduceOpTypeString(s string) (ReduceOpType, error) {
	if val, ok := _ReduceOpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ReduceOpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ReduceOpType values", s)
}

// ReduceOpTypeValues returns all values of the enum
func ReduceOpTypeValues() []ReduceOpType {
	return _ReduceOpTypeValues
}

// ReduceOpTypeStrings returns a slice of all String values of the enum
func ReduceOpTypeStrings() []string {
	strs := make([]string, len(_ReduceOpTypeNames))
	copy(strs, _ReduceOpTypeNames)
	return strs
}

// IsAReduceOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ReduceOpType) IsAReduceOpType() bool {
	for _, v := range _ReduceOpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
